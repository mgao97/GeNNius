====================================================================================================
data: HeteroData(
  drug={
    node_id=[59],
    x=[59, 12],
  },
  protein={
    node_id=[199],
    x=[199, 20],
  },
  (drug, interaction, protein)={ edge_index=[2, 620] },
  (protein, rev_interaction, drug)={ edge_index=[2, 620] }
)
====================================================================================================
****************************************************************************************************
train data: HeteroData(
  drug={
    node_id=[59],
    x=[59, 12],
  },
  protein={
    node_id=[199],
    x=[199, 20],
  },
  (drug, interaction, protein)={
    edge_index=[2, 348],
    edge_label=[258],
    edge_label_index=[2, 258],
  },
  (protein, rev_interaction, drug)={ edge_index=[2, 348] }
)
****************************************************************************************************
val data: HeteroData(
  drug={
    node_id=[59],
    x=[59, 12],
  },
  protein={
    node_id=[199],
    x=[199, 20],
  },
  (drug, interaction, protein)={
    edge_index=[2, 434],
    edge_label=[186],
    edge_label_index=[2, 186],
  },
  (protein, rev_interaction, drug)={ edge_index=[2, 434] }
)
****************************************************************************************************
test data: HeteroData(
  drug={
    node_id=[59],
    x=[59, 12],
  },
  protein={
    node_id=[199],
    x=[199, 20],
  },
  (drug, interaction, protein)={
    edge_index=[2, 496],
    edge_label=[372],
    edge_label_index=[2, 372],
  },
  (protein, rev_interaction, drug)={ edge_index=[2, 496] }
)
****************************************************************************************************
edge_x: torch.Size([258, 32])
labels: torch.Size([258])
edge_x: torch.Size([186, 32])
labels: torch.Size([186])
edge_x: torch.Size([372, 32])
labels: torch.Size([372])
model: HGT(
  (lin_dict): ModuleDict(
    (drug): Linear(-1, 32, bias=True)
    (protein): Linear(-1, 32, bias=True)
  )
  (convs): ModuleList(
    (0-1): 2 x HGTConv(-1, 32, heads=2)
  )
  (lin): Linear(64, 1, bias=True)
)
Traceback (most recent call last):
  File "/home/ad/mgao/GeNNius/Code/test_hgt_ours_rf_davis.py", line 340, in <module>
    val_loss = train(model, val_data, optimizer, device)
  File "/home/ad/mgao/GeNNius/Code/test_hgt_ours_rf_davis.py", line 184, in train
    loss.backward()
  File "/home/ad/miniconda/envs/hy/lib/python3.9/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/ad/miniconda/envs/hy/lib/python3.9/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn
